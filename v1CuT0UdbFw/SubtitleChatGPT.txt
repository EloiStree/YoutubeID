Salut à vous et bienvenue sur cette vidéo qui fait suite à quatre autres vidéos où on montre un peu comment Unity fonctionne, comment ça fonctionne, parce que c'est, qu'est-ce que c'est des installations, et notre ami est très fan de guide, comme je le suis enfin ça passe, on l'utilise parce qu'il est intéressant. Moi de mon côté, tout ce que je fais, j'héberge ce guide, parce que c'est vraiment un outil extrêmement puissant, que ce soit pour le backup. Si vous avez votre projet sur un site web et sur votre ordinateur, vous ne pouvez littéralement jamais le perdre, un petit backup en plus sur un disque dur, là, vous êtes sûr de ne jamais perdre votre vie, ne jamais perdre votre code. Ça permet de revenir dans le temps pour voir le code quand vous étiez il y a un an, ça permet de partager de travailler en groupe. C'est un outil qui est on peut mettre les sites en ligne. Par exemple, toute ma documentation administrative est dessus, et il n'y a pas moyen de les perdre du coup. Donc ma vie est au guide, et au moins je suis sûr de ne jamais la perdre, alors que mes disques durs, je les ai fait tomber une fois et l'autre était corrompu, et j'ai perdu il m'a dit toute ma vie avant 18 ans.

Donc voilà un peu pourquoi j'aime bien Git. Vous allez me dire, oui, mais pourquoi pas Dropbox ? Vous pouvez utiliser Dropbox, et pas avec Unity, parce que ça risque de créer des problèmes avec les fichiers, et en plus de ça, Dropbox, ça veut dire que vous faites confiance à une personne tierce de ne pas utiliser vos trucs, et une personne tierce de ne pas devoir gérer vos backup, et vous devriez gérer vos bacs. Donc on va utiliser Git.

Les marketeux, les gens qui n'aiment pas l'informatique, vous pouvez fuir. Ceci est pour les codeurs et les gens qui veulent étudier. Sachant que Git peut être utilisé pour les non-codeurs, c'est juste que c'est un peu friand. Donc, ce cours-ci va être un peu effrayant. Donc, il faut utiliser des lignes de commande, c'est ça, c'est pas dur, mais c'est juste que dans celui-ci, on vous demande de cacher les yeux.

Alors, déjà, il faut installer Git, effectivement. Donc, il faut aller sur le site officiel de Git, donc c'est pas GitHub, mais c'est Git Bash qu'il faut installer. Ouais, d'ailleurs, tu peux aller directement sur le site de Git tout court. La différence, c'est quoi ? GitHub, c'est un hébergeur de Gits. C'est un serveur sur lequel vous pouvez les mettre, votre Git, et travailler avec vos équipes, faire vos backup et des trucs comme ça. Nous, ce qu'on veut, c'est installer le logiciel. Ok, du coup, on va taper Git. Voilà, tu peux faire télécharger dans l'autre, ça va arriver sur le site ici, où le gars qui gère ça a tout expliqué. Il y a des documentations, il y a des tutos et tout. On va télécharger la version Windows. On télécharge celle qui nous est propre, donc 32 ou 64 bits. 64 bits dans...Ton cas, mais comme moi, je l'ai déjà téléchargé. Comme lui, il a déjà téléchargé, il ne va pas le faire, mais vas-y. Comment vous devez télécharger ça et après, il faut juste faire "Next, Next, Next". Sachant que si vous êtes un peu plus expert, vous pouvez paramétrer les trucs, mais vas-y. Moi, tout est prévu pour les débutants, donc faites "Suivant" jusqu'à la fin.

J'ouvre mon terminal. Admettons que vous avez réussi à installer Git, vous avez un terminal et là on peut mettre Git. Et si tu mets "Git V", normalement on devrait voir quelle version de Git il a installé, mais un peu geek, entre. Donc là, ça veut dire que lui, il a réussi son installation, sinon qu'on vous a pas monté, mais il a réussi. Et donc, si mes guides V, il va aussi voir la version de Git. C'est super cool.

Alors le truc, c'est que maintenant, ce qu'on aimerait bien faire, nous, c'est prendre le dernier projet qu'on a fait ensemble pour montrer un peu ce que c'était des assets et le mettre à disposition des gens qui vont participer au workshop. Pour ça, il faut qu'on l'héberge quelque part. Vous avez le choix entre GitLab, qui a un serveur privé avec des trucs un peu payant et tout, mais voilà, c'est un autre concurrent de GitUp. GitHub qui est très connu, mais qui se permet de prendre les projets avec couteau avec autopilotes et de voler vos données pour apprendre à Ilia comment on connaît. Donc en gros, il protège vos données et il est rentré, mais en même temps, il les utilise. Donc soit aller chez d'autres concurrents, soit élargir votre propre serveur. Nous, on ne va pas aller dans le complexe, on va laisser Ilia s'alimenter le truc. On va aller sur GitUp. Mais du coup, je vais aller sur le GitHub, je vais créer un nouveau projet. C'est ça, et si je vais, je vais l'appeler, imaginons, workshop, par exemple. Je peux le mettre en mode privé pour que les gens ne le voient pas, mais je vais le laisser en public pour que tout le monde puisse y accéder. Et je crée le répertoire. Tu pouvais ajouter un ReadMe, en fait. Ce qui se passe ici, c'est que si vous laissez comme ça, vous allez devoir vous-même créer un premier fichier, le coucher en ligne et faire toutes les lignes de commande que ici on vous demande de faire. Une autre méthode pour les débutants, c'est de cliquer sur ReadMe, donc de créer un ReadMe ici, inclus de inclure un ReadMe de juste mettre un vrai texte, donc ici, voilà, comme ça, et de le coït. Et donc, ça va permettre de le faire commit en ligne.

Je pars du principe que vous connaissez un minimum Git parce que sinon, je vais devoir répondre tout de suite. Ok, je prépare du principe que vous connaissez minimum Git et que vous voulez l'utiliser dans Unity. Donc ici, on va aller cloner ce dossier là près du projet que l'on va faire. Comment est-ce ?Qu'on aurait préféré garder les lignes de commande, les lignes de commande qui te donnent, ouais, parce que je les copie et je les colle directement ici dans le terminal pour envoyer directement mon projet. Tu peux, mais trop tard. Mais du coup, ici, est-ce que vous allez faire ce que vous allez aller là chercher HTML parce que vous n'avez pas utilisé ces saches et d'autres, c'est des trucs de sécurité. On va aller dans le projet. Ouais, par contre, j'ai envie de montrer un truc qui est assez intéressant que les gens ne connaissent pas. C'est que tu peux aller dans le dossier de ton projet, tu tapes dans le chemin d'accès ici de Windows, tu écris CMD. Donc ici, on va faire les commandes peu importe le terminal. On va faire la commande, donc on va aller près du projet, guide clone. On va mettre le lien qu'on avait, on va dire oui et là, il va nous créer du coup un dossier guide. Le truc, c'est qu'il n'est pas à la racine du projet. Il a créé un dossier, non, il a créé un dossier qui s'appelle hello Unity. Le problème, c'est que nous, on veut que le Unity soit, tu vois, à la racine. Mais si tu déplaces Unity, tu vas perdre des liens dans une scie donc il va pouvoir tout Rebuilder. Ce qu'on va faire, c'est qu'on va ouvrir ça, on va afficher les dossiers cachés. Donc comment est-ce qu'on fait ça? On va dans affichage, voilà, et on va copier tout ça. C'est à dire, faire contrôle A et on va le descendre d'un cran dans My projet. Voilà, voilà. Maintenant, si on fait guide statut, statut ça veut dire voir les fichiers qui vont être modifiés ou ajouter. Si on fait les commandes, on peut voir que, il y a plein de trucs qui n'ont pas été encore ajouté au guide. C'est à dire, la sauvegarde locale et qu'on va ajouter. Mais dedans, on voit qu'il y en a une qui s'appelle librairie. Le problème, c'est que librairie, il y a des milliers des milliers de tout petits fichiers avec des noms bizarres qui sont des fichiers temporaires. Il faut savoir l'ignorer. Pour l'ignorer, vous avez soit votre guide habituel, Gitting Nord habituel, soit vous allez chercher sur le site web, Githique Nord. Vous pouvez aller sur un site web qui s'appelle Githique Nord que vous devez faire. Donc ici, si on tape une fois et qu'on fait créer, il va nous créer tout ce que les gens ont l'habitude d'ignorer. Donc, je copie tout ça. Voilà, on va aller créer un fichier là-bas donc à la racine du projet. Et alors, en fait, la partie qualité dans c'est que c'est pas Gitting Nord poids quelque chose, c'est rien point Gitting Nord parce qu'en fait, Gitting Nord, c'est l'extension du fichier et le fichier n'a pas de nom. Donc, c'est point. Donc là, vous allez voir que maintenant on a un certain fichier Githique Nord qui a été créé. On va aller l'éditer.Alors dites-le dans le truc normal parce que les gens ne connaissent pas ton interface. Du coup, directement, tu peux aller juste ouvrir VS Code. Donc, j'ouvre VS Code comme ça je peux éditer ici de manière graphique. Donc vous voyez, tout ça c'est sauvegardé, je peux quitter, c'est ça. Et donc, là maintenant, maintenant ce qui se passe c'est que si vous faites "git status", on va voir que maintenant la bibliothèque a été ignorée, le log a été ignoré. Donc on ne garde plus que ce qui est essentiel à Unity, ce qui est très pratique. Donc maintenant, on va pouvoir dire "bah c'est bon". Alors, on va ajouter ça à la version sauvegardée localement. Donc, on va faire un "git add point" pour dire "ajoute-moi tout ce qui a été modifié dernièrement depuis la dernière sauvegarde". Alors moi, j'aurais tendance à mettre une étoile, tu peux mettre une toile, ça des petites nuances, mais les expliquer ça va être chiant. Maintenant, tu peux faire "git status" pour montrer un peu à quoi ça ressemble. Ça va nous montrer qu'en fait, voilà, tout ce qui va être ajouté dans la version suivante, ok ? Bah du coup, c'est chouette. Alors, il n'a pas ajouté "le githique Nord", je ne sais pas pourquoi parce que là, avec tirer mi pour dire "il y a un message derrière". Alors, "comics", c'est une sauvegarde. Une sauvegarde doit toujours essayer, si vous êtes propre, d'avoir un contexte. Donc, ici, basiquement, par exemple, mettre "première version publiée" ou autre comme ça, vous pouvez mettre "j'ai ajouté un arbre, j'ai fait ceci, j'ai fait cela". Le but, c'est de donner du contexte pour qu'on voit un historique du projet avancé. Donc là, juste lui prendre la version, voilà, on peut refaire un "git status" et là, on voit que le Nord n'a pas été ajouté. Ça peut "git add". "git status". Du coup, attends, tu as oublié "git add". Faites gaffe que si vous faites des fautes d'orthographe dans celui-ci, c'est éternellement dans le projet "git". Si jamais vous mettez "Fox disproject" dans le "git", c'est éternel. Il y a moyen le modifier, mais c'est très dur. Alors maintenant, parce que le problème c'est que c'est jamais à l'abri. Bon, ici, dans ce bloc, dans ce cas-ci, on est tout seul, ok ? Mais on n'est jamais à l'abri que quelqu'un a été modifié sur le serveur quelque chose. Par exemple, si tu vas dans le "redmi" et que tu modifies les "ridmis", bah tu te fais autoconcurrence. Donc d'abord, faut d'abord faire un "git pull" ou un "git fetch". Ça veut dire on va aller vérifier qu'il n'y a pas quelque chose de nouveau et puis on va le télécharger. "Deadpool", ça veut dire "on s'en fout, vas-y, télécharge-moi tout comme ça".Ça écrase et ça fait un conflit si jamais quelque chose ici nous dit non. C'est bon, tu es à jour, il n'y a personne qui a travaillé depuis, ni toi ni quelqu'un d'autre. Donc on va faire pour faire une couche. Voilà, alors ici on nous demande du coup de nous connecter. Donc ici, c'est la première fois. Du coup, on va devoir aller dire "ouais, ouais, tu peux aller mettre dans le navigateur, c'est bien moi". Il va ouvrir le navigateur, le navigateur va regarder sur votre Git-up : est-ce que c'est bien vous ? Alors, pour ça, il va ouvrir Git-up, normalement gentiment. On va lui laisser un peu le temps, on sait jamais qu'il soit grand. On va faire la fenêtre vient de la console, racing objet. Il ne faut pas mettre le lien d'acheter. Voilà, bah il a fait, il a fait l'identification, c'est bon. Donc, en fait, ce qu'il a fait, c'est qu'il a ouvert le navigateur, il est allé voir que vous êtes bien sur le guide de Yak à cloné, au départ c'était bien lui, et donc du coup, il a bien poussé le code en ligne. Comment savoir que ça a marché ? Il faut juste revenir ici, rafraîchir la page et on voit les nouveautés qui ont été le projet en ligne, sur son projet, enfin sur son guide à lui. Alors, comment est-ce qu'on se posait la question ? Oui, mais comment est-ce qu'on va faire pour que moi j'ai eu le projet alors que c'est sur son compte à lui ? Ici, que je peux faire, c'est collaborateur. Donc, ici, je vais pouvoir aller ajouter quelqu'un qui va venir pouvoir travailler avec moi, mais il va pouvoir aussi modifier. Alors, ça, c'est la première méthode. Le problème de cette méthode-là, c'est qu'elle risque, parce qu'en gros, ça veut dire que je peux supprimer son projet, je peux modifier des trucs, ça va pas être très pratique du coup. Vu qu'il a fait un projet qui publie, moi je vais pouvoir y aller. Alors, je vais vous montrer sur mon écran. Je suis sur mon écran, je t'envoie juste le lien sur Discord. Ouais, ben je peux aussi aller regarder ce que tu es sur Git-up. Ok, donc sur Git-up, tu t'appelles comment ? Toi, tu t'appelles Najip. Donc on va aller pour qu'il recherche des achats, est-ce que tu es dedans ? Non, je pense que c'est le... Je t'envoie ça, si ça compte. Attends, on va essayer. Donc, la première lettre, ou sinon, je peux directement copier ça dans ton au-dessus sur guide. Ici, je te trouve pas, je sais pas pourquoi, mais ton répertoire. Donc, en fait, c'est les projets que lui fait, apparemment, il en a fait 7, il en a fait plein de trucs. Et ici, on a le hello Unity. En fait, ce qui se passe, c'est que vu qu'il ne m'a pas donné l'autorisation de modifier, mais que moi, j'ai quand même envie d'avoir son projet.Je vais faire ce qu'on appelle un "fork". Et le fork, c'est ce truc là. Moi, j'ai cliqué sur ce bouton, je veux dire "oui, j'ai envie de copier ce projet". Sauf que moi, j'aime pas ton titre. Du coup, je vais le redonner. Et vu que moi, j'ai une convention de nommage pour mes projets, c'est de commencer avec la date. Pas besoin de le faire, c'est juste ma confiance en moi, c'est pas obligatoire. Moi, je mets toujours la date, le mois et le jour pour dire "j'ai commencé la création de ce projet à ce moment-là". Comme ça, ça me donne un historique sur mes disques durs et je n'ai pas besoin de trier, et j'ai tous mes projets en mode "OK, je l'ai commencé à telle date, j'ai commencé à telle date". Donc ici, c'est pas vraiment "Hello Unity", c'est plus ça : "How to import à 7". Si, par exemple, des mots-clés vous importent à 7, Rome il Unity external. Je dis que c'est bon, je vais faire une copie. Et en fait, ce qui va se passer, je vais recevoir une notification peut-être ici. Ce qui va se passer, c'est qu'il va copier le guide, il va me le mettre sur le mien. Ce qui veut dire que si lui un jour il supprime son "fork", si il supprime son projet, j'ai toujours mon projet, OK ? Donc normalement, tu ne peux pas supprimer ma version. Donc faut faire gaffe que quand vous faites de l'Open Source, dès le moment où quelqu'un a fait un "fork", qu'il a votre code, donc c'est bon, je le possède ton code maintenant. C'est toujours lui le créateur au niveau de la propriété intellectuelle. Donc si jamais je veux réellement l'utiliser, je dois d'abord lui demander son accord. Donc en gros, est-ce que je peux utiliser ton assiette pour présenter aux élèves ? Tu en fais ce que tu veux, et vu que c'est enregistré, c'est bon. Alors juste ici, des amis... Alors ici, c'est des alertes qui n'ont pas à voir avec moi. Donc c'est des alertes sécuritaires, peut-être des gens qui essaient de se connecter, je ne saurais dire. Donc maintenant qu'on a ça, ben moi, si moi je veux la voir sur mon ordinateur, je vais faire pareil que ce que lui a fait tantôt. Je vais aller copier ce truc là et le mettre sur mon ordinateur. Ok ? Donc on va faire copier. Alors ouais, le truc, c'est que vous pouvez copier en HTML ou en SSH. Non, je vais pas vous expliquer ça, c'est trop compliqué pour la vidéo, ça sert à rien, c'est pas le sujet. Je vais vous expliquer ce que c'était les SSH, mais de manière de copier de manière sécurisée, de sécuriser avec un fichier clé qui est sur votre ordinateur pour être sûr que ce soit bien vous et personne d'autre, que personne puisse voir, ok quoi. Mais on s'en fout, on va les copier ça sur ma machine. Alors moi, je me suis mis dans Windows 7. On a un truc qui normalement s'appelle...Molengeek.

Je crois voilà, nos quetsches, on va aller ici: CMD.

Guide, clone en clone le projet ici. Voilà, j'ai donc son projet qui est ici, qui est le vôtre alors? Ça c'est le projet d'hier, c'est pas celui-là. Voilà, c'est celui-là et on va aller l'ouvrir avec Unity donc on va inutile open. Ceci, on lui dit de l'ouvrir, il nous dit oui mais mec, t'as pas la même version que lui. En fait, ce qui se passe, c'est que moi j'ai toujours pas installé la nouvelle version que lui a, qui est la 21F. Si on travaille ensemble sur le même projet pour longtemps, je réinstallerai la même version que lui. Donc ici, je peux soit faire un stade, soit dire ben non mais en fait, on va l'ouvrir avec un autre, par exemple ici moi je vais le forcer.

Avant on avait l'option, donc je suis en train de la chercher, missing version tête à table. Théoriquement, il y a moyen d'ouvrir avec une autre version, je dirais peut-être parce que j'ai la dernière version, tu peux pas le faire avec l'ancien. Vu qu'il va te manquer la version avec un autre éditeur plus bas niveau, plus haut niveau, mais je sais pas pourquoi ils ont fait une modification qui m'empêche de faire ça. Donc en gros, si je veux travailler avec lui, il va falloir que j'installe la version 2023 ou que je débloque une ancienne version du Inke pour aller ouvrir avec Yeti. Donc pour l'instant, j'ai juste installé pour que comme ça au moins tantôt, j'ai une version à jour.

Alors vous pouvez voir que ça va reprendre de la place sur mon PC, parce que basiquement, je vais réinstaller des trucs qui vont peut-être être doublons directement. Il faut savoir, attends remote aussi. Donc là, il va envoyer, je sais pas si ça va marcher tout de suite ou pas, parce que le projet pour lequel j'envoie, il a déjà été envoyé une fois finalement. Et donc voilà, il y a mille et une manière de faire des choses et on en apprend tous les jours. Si j'arrive fraîche la page ici, bah j'ai tout ce qui est tout ce qui a été envoyé qui est là. Le petit détail pour ceux qui ne connaissent pas, vous êtes dans le train, vous voulez travailler et vous voulez utiliser Git. Sachez que ici, dans les premières lignes qui vous a montré, donc si tu les remontes ici, on a dit init qui veut dire créer le projet guide sur Windows. Donc, ça permet d'initier un projet guide. Puis on a du guide ad commit et tout, c'est pour faire des sauvegardes. Donc en fait, dès le moment vous avez fait git init sur votre projet sur votre ordinateur, ça veut dire c'est bon, tu peux commencer à travailler vite. Donc vous êtes dans le train, vous travaillez pendant trois ou quatre heures, vous pouvez faire trois, quatre...Comités, sauvegarder au fur et à mesure pour revenir en arrière, faire des embranchements et tout, leur remote. Ici, on a mis directement après, mais vous pouvez le faire. On peut le faire plus tard en fait. Donc, une fois que vous êtes sorti du train, vous arrivez au cowork, vous pouvez commencer à mettre tout ça en ligne sur GitHub. Donc, vous n'êtes pas obligé d'être directement sur le serveur, vous pouvez le faire ici même, pas obligé de pêche non plus directement. Pour ceux qui, par exemple, ils ont la flemme de taper des commandes et tout, dans mon cas, par exemple, j'ai créé un script qui permet juste d'écrire un mot et qui réussit me propose un message à mettre. Donc, je vais dire "moi message, c'est pas grave". Mais là, ici, il le fait de lui-même, il envoie. Donc, si j'arrive fraîche la page, ici, il y a mon message qui c'est ça. Alors, ils viennent me dire "c'est pas grave, je le modifierai après". Alors, ah, le projet, en fait, ce que j'allais dire c'est, en fait, moi je m'en fous un peu parce que j'ai forcé son projet. Donc, en fait, maintenant, il peut faire de la mer sur son projet, mais c'est pas grave, c'est pour l'exemple. Admettons que lui il continue à faire du code, tu continues à faire de ton projet en fait, moi vu que j'ai forqué, on s'en fout. J'ai un projet qui est complètement différent, mais lié à son projet, c'est-à-dire que si un jour je me dis "j'ai envie de me mettre à jour sur lui", je peux aller le tirer, prendre les codes qui lui a fait et si moi mon côté j'ai fait un truc qui était propre et je me dis "ah j'ai bien envie de lui envoyer le truc qui était propre", je peux lui faire un pull request. C'est-à-dire lui dire "je t'envoie quelque chose" et lui pourra accepter ou refuser de le mettre dans le projet principal. S'il l'accepte, tous les mecs qui ont hérité de ce projet, qui ont forcé ce projet vont recevoir une notification en mode "et il y a quelque chose de nouveau, tu veux te mettre à jour", ce qui veut dire qu'en fait si on travaille, je sais pas moi, 50 derrière toi, bah 50 personnes que je te propose du code et toi tu peux accepter et de faire répercuter au 50 qui veulent se mettre à jour, c'est vraiment ça qui est beau dans une ici, dans guide pardon et donc ouais, un très beau et très belle outil. Sur ce, les gars, on va aller dormir. On vous souhaite une bonne fin de soirée, pour si vous êtes aussi en fin de soirée et à bon moment avec vous.